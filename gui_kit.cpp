#include <windows.h> //윈도우 프로그래밍에 필요
#include <stdio.h>
#include <stdlib.h>

#define WM_MYMOVE WM_USER + 1

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
LRESULT CALLBACK WndProc2(HWND, UINT, WPARAM, LPARAM);
HINSTANCE _hInstance;
WNDPROC _fpOldBtnProc;

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszArg, int nCmdShow)
{
	HWND hWnd;
	HWND _hWnd2;
	MSG msg;
	WNDCLASS WndClass, WndClass2;
	WndClass.style = NULL;
	WndClass.lpfnWndProc = WndProc; //이벤트 처리 함수 이름, 변경가능
	WndClass.cbClsExtra = 0;
	WndClass.cbWndExtra = 0;
	WndClass.hInstance = hInstance; //프로그램 ID 기록
	WndClass.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW);
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH); //화면 색
	WndClass.lpszMenuName = NULL;
	WndClass.lpszClassName = "Hello"; //변경가능 -> 정의 등록

	WndClass2 = WndClass;
	WndClass.lpfnWndProc = WndProc2;
	WndClass.hbrBackground = (HBRUSH)GetStockObject(BLACK_BRUSH); //화면 색
	WndClass.lpszClassName = "WND2"; //변경가능 -> 정의 등록

	if (!RegisterClass(&WndClass)) return NULL;
	if (!RegisterClass(&WndClass2)) return NULL;

	_hInstance = hInstance;


	hWnd = CreateWindow( //실제 윈도우 생성(11개의 인자)
		"Hello", //이름이 Hello인 클래스를 이용하여 윈도우 생성
		"Hello", //윈도우 타이틀
		WS_OVERLAPPEDWINDOW,
		CW_USEDEFAULT,
		CW_USEDEFAULT,
		CW_USEDEFAULT,
		CW_USEDEFAULT,
		NULL, NULL, hInstance, NULL
	);
	_hWnd2 = CreateWindow( //실제 윈도우 생성(11개의 인자)
		"WND2", //이름이 WND2인 클래스를 이용하여 윈도우 생성
		"World", //윈도우 타이틀
		WS_OVERLAPPEDWINDOW,
		320, 0, 320, 240,
		hWnd, NULL, hInstance, NULL
	);
	
	ShowWindow(hWnd, nCmdShow); //생성된 윈도우를 실제로 출력
	UpdateWindow(hWnd);



	//메시지 루프
	while (GetMessage(&msg, NULL, 0, 0)) //GetMessage()가 false 될 때까지
	{                                    // == WM_QUIT일때, Application Queue에서 갖고옴
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}
	return msg.wParam;
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT mesg, WPARAM wParam, LPARAM lParam)
{
	static HWND hWnd2;

	switch (mesg)
	{
	case WM_CREATE:

		hWnd2 = CreateWindow("WND2", "자식윈도우",
			WS_OVERLAPPEDWINDOW | WS_VISIBLE,
			320, 0, 320, 240, hWnd, NULL, _hInstance, NULL);
		break;

	case WM_MOUSEMOVE:
		/*
		int x, y;
		HDC hdc;
		x = LOWORD(lParam);
		y = HIWORD(lParam);
		hdc = GetDC(hWnd2);
		TextOut(hdc, x, y, "X", 1);
		ReleaseDC(hWnd2, hdc);
		*/
		/*
		int x, y;
		x = LOWORD(lParam);
		y = HIWORD(lParam);
		lParam = (x << 16) | y; //스왑
		*/
		SendMessage(hWnd2, 2000, wParam, lParam);
		//PostMessage(HWnd hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
		break;

	case WM_DESTROY:
		PostQuitMessage(0);
		return FALSE;
	}
	return DefWindowProc(hWnd, mesg, wParam, lParam); //기본적인 윈도우 메시지 처리(default)
}
LRESULT CALLBACK WndProc2(HWND hWnd, UINT mesg, WPARAM wParam, LPARAM lParam)
{
	switch (mesg)
	{
	case 2000:
		int x, y;
		HDC hdc;
		x = LOWORD(lParam);
		y = HIWORD(lParam);
		hdc = GetDC(hWnd);
		TextOut(hdc, x, y, "X", 1);
		ReleaseDC(hWnd, hdc);
		break;
	case WM_DESTROY:
		PostQuitMessage(0);
		return FALSE;
	}
	
	return DefWindowProc(hWnd, mesg, wParam, lParam);
}
//==SetWindowLong()
